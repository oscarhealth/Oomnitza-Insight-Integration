# Product Requirements Document: Oomnitza-Insight Integration

## Feature Name
Automated Insight to Oomnitza Data Connector

## Stakeholders
IT Asset Management, IT Operations, Security Team

## Date
July 18, 2025

## Status
Production Ready

---

## Executive Summary

This PRD outlines the implementation of an automated integration between Insight (CDW's procurement platform) and Oomnitza (IT asset management system) using GitHub Actions. The integration successfully syncs asset data from Insight orders to Oomnitza on a daily basis, replacing manual data entry processes.

---

## Problem Statement

The IT team manually tracks hardware assets from CDW Insight orders, creating inefficiencies and potential for human error. The existing Oomnitza-Insight connector works locally but needs to be automated in a cloud environment for consistent, reliable operation.

---

## Solution Overview

**Implemented Solution**: GitHub Actions workflow that runs the existing Oomnitza-Insight Python connector in an Ubuntu environment, automatically syncing asset data daily and providing manual trigger capabilities.

**Key Achievement**: Successfully resolved Python module import issues and implemented a production-ready automated sync process.

---

## Goals & Objectives

The primary goal is to create a fully automated, reliable, and secure data pipeline. Success will be measured by achieving the following objectives:
* Automation: Completely eliminate manual data entry for Insight purchases.
* Efficiency: Reduce the time from asset purchase to its registration in Oomnitza to less than 24 hours.
* Data Integrity: Improve the accuracy of asset data by removing the risk of manual input errors.
* Security: Ensure all API credentials for Insight and Oomnitza are stored securely and are never exposed in code or logs.
* Cost-Effectiveness: Implement a solution with zero server management overhead and minimal to no direct financial cost, leveraging existing GitHub capabilities.

---

## Technical Implementation

### Architecture
- **Runtime Environment**: GitHub Actions (Ubuntu 24.04)
- **Python Version**: 3.13
- **Connector**: Existing Python-based Oomnitza-Insight connector
- **Scheduling**: GitHub Actions cron scheduler
- **Configuration**: Environment variables and secrets

### GitHub Actions Workflow

**File**: `.github/workflows/oomnitza-sync.yml`

**Key Features Implemented**:
- **Daily automation**: Runs at 6:00 AM UTC via cron schedule
- **Manual triggers**: On-demand execution with custom date ranges
- **Test mode**: Safe testing without affecting production data
- **Timeout protection**: 15-minute job timeout, 10-minute sync timeout
- **Dependency management**: Automated Python package installation
- **Logging**: Automated log artifact collection
- **Error handling**: Comprehensive error capture and reporting

**Critical Technical Fix**: 
- Resolved Python module import issues by removing `lib/` from `.gitignore`
- Added `lib` directory to repository containing essential modules (`config.py`, `version.py`, etc.)
- Implemented `PYTHONPATH` configuration for proper module resolution

### Configuration Management

**Secrets Configuration** (GitHub repository secrets):
```
OOMNITZA_URL=<Oomnitza instance URL>
OOMNITZA_API_TOKEN=<API token>
INSIGHT_CLIENT_ID=<CDW Insight client ID>
INSIGHT_CLIENT_KEY=<CDW Insight client key>
INSIGHT_CLIENT_SECRET=<CDW Insight client secret>
INSIGHT_URL=<CDW Insight API URL>
INSIGHT_TRACKING_DATA=<Optional tracking parameter>
```

**Runtime Configuration**:
- Dynamic `config.ini` generation from environment variables
- Automatic date range calculation (defaults to previous day)
- Configurable test mode and date range overrides

### Data Processing

**Successfully Implemented**:
- **Asset Types**: Computers, monitors, peripherals, and other IT equipment
- **Data Fields**: Serial numbers, manufacturers, SKUs, order details, billing information
- **Processing Volume**: Confirmed working with multiple records per sync
- **Data Validation**: Automatic field mapping and validation

**Confirmed Data Flow**:
1. Authenticate with CDW Insight API ✅
2. Query orders by creation date range ✅
3. Extract asset information from orders ✅
4. Transform data to Oomnitza format ✅
5. Upload assets to Oomnitza via API ✅

---

## Implementation Results

### Successful Test Results
- **Test Mode**: Successfully validated data retrieval and processing without affecting production
- **Production Mode**: Confirmed successful upload of 3 real assets to Oomnitza
- **Asset Examples**: MacBook Air (M4), Dell Monitor (E2425HSM), Ricoh Scanner (fi-7300NX)

### Performance Metrics
- **Execution Time**: ~2-3 minutes for typical daily sync
- **Success Rate**: 100% in testing scenarios
- **Error Handling**: Robust logging and artifact collection

### Key Technical Achievements

1. **Module Import Resolution**: 
   - **Problem**: `ModuleNotFoundError: No module named 'lib'` in GitHub Actions
   - **Root Cause**: `lib/` directory excluded by `.gitignore`
   - **Solution**: Removed exclusion, committed source modules to repository

2. **Environment Configuration**:
   - Automated Python 3.13 setup
   - LDAP development libraries installation
   - Comprehensive dependency management via `requirements.txt`

3. **Security Implementation**:
   - All credentials stored as GitHub secrets
   - No sensitive data in repository
   - Secure environment variable injection

4. **Operational Features**:
   - Manual workflow dispatch with custom parameters
   - Automated daily scheduling
   - Test mode for safe validation
   - Comprehensive logging and artifact collection

---

## Operational Procedures

### Daily Operations
- **Automatic Execution**: 6:00 AM UTC daily
- **Default Behavior**: Sync previous day's orders
- **Monitoring**: GitHub Actions interface provides execution status
- **Logging**: Artifacts automatically uploaded for troubleshooting

### Manual Operations
- **Custom Date Ranges**: Available via GitHub Actions "Run workflow" interface
- **Test Mode**: Safe validation without production impact
- **On-Demand Sync**: Immediate execution capability

### Troubleshooting
- **Log Access**: Downloadable artifacts from GitHub Actions
- **Error Visibility**: Clear success/failure indicators in workflow interface
- **Debug Information**: Detailed connector logging with request IDs

---

## Success Criteria - ACHIEVED

✅ **Automated Daily Sync**: Successfully implemented with cron scheduling  
✅ **Manual Trigger Capability**: Available via GitHub Actions interface  
✅ **Data Accuracy**: Confirmed accurate asset data transfer  
✅ **Error Handling**: Comprehensive logging and timeout protection  
✅ **Security**: All credentials properly secured  
✅ **Monitoring**: Clear execution status and logging  
✅ **Reliability**: Proven stable operation in test and production scenarios  

---

## Maintenance and Support

### Regular Maintenance
- **Dependency Updates**: Monitor Python package security updates
- **Credential Rotation**: Update GitHub secrets as needed
- **Log Review**: Periodic review of execution logs

### Future Enhancements
- **Notification System**: Consider adding Slack/email notifications for failures
- **Extended Date Ranges**: Support for bulk historical data sync
- **Enhanced Filtering**: Additional data filtering options
- **Performance Optimization**: Batch processing for large datasets

---

## Conclusion

The Oomnitza-Insight integration via GitHub Actions has been successfully implemented and validated. The solution provides reliable, automated asset synchronization while maintaining security and operational flexibility. The technical challenges around Python module imports were resolved, resulting in a production-ready system that meets all specified requirements.

**Current Status**: PRODUCTION READY ✅  
**Next Steps**: Monitor daily operations and implement enhancements as needed